name: CI/CD Pipeline

on:
  push:
    paths:
      - ${{ values.app_name }}/** # Gatilho para alterações no diretório da aplicação
    branches:
      - main

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      # Define uma saída para este job, que poderá ser usada em outros jobs
      image_tag: ${{ '${{ steps.set-tag.outputs.tag }}' }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Definir a tag da imagem (SHA reduzido)
        id: set-tag
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ '${{ secrets.DOCKERHUB_USERNAME }}' }}
          password: ${{ '${{ secrets.DOCKERHUB_TOKEN }}' }}

      - name: Build e Push da imagem
        # A tag da imagem é recuperada da saída do passo 'set-tag'
        run: |
          docker build -t ${{ '${{ secrets.DOCKERHUB_USERNAME }}' }}/${{ values.app_name }}:${{ '${{ steps.set-tag.outputs.tag }}' }} .
          docker push ${{ '${{ secrets.DOCKERHUB_USERNAME }}' }}/${{ values.app_name }}:${{ '${{ steps.set-tag.outputs.tag }}' }}

  update-image-tag:
    # Garante que este job só rode após o sucesso do job anterior
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      # Este passo de checkout é necessário para a action create-pull-request funcionar no mesmo repositório
      # Se o seu código da app e do helm estiverem em repositórios diferentes, use o checkout original
      - name: Checkout do código do deployment
        uses: actions/checkout@v3
        with:
          # Repositório que contém os charts do Helm
          repository: uday-platform-idp-org/${{ values.app_name }}
          token: ${{ '${{ secrets.PERSONAL_ACCESS_TOKEN }}' }}
          path: infra # Clona para dentro do diretório 'infra'
      
      - name: 🔍 Listar conteúdo do diretório clonado (DEBUG)
        run: ls -R infra

      - name: Atualizar a tag da imagem no Helm values.yaml
        env:
          NEW_TAG: ${{ '${{ needs.build-and-push-image.outputs.image_tag }}' }}
        working-directory: infra # Certifique-se de que este diretório está correto
        run: |
          echo "Alterando a tag da imagem para: $NEW_TAG"
          # Substitui a linha que começa com 2 espaços e 'tag:'
          sed -i "s/^  tag: .*/  tag: $NEW_TAG/" charts/${{ values.app_name }}/values.yaml
        

      - name: Criar Pull Request com a atualização
        uses: peter-evans/create-pull-request@v6
        with:
          # Aponta para o diretório que contém o repositório clonado
          path: infra
          token: ${{ '${{ secrets.PERSONAL_ACCESS_TOKEN }}' }}
          # A action criará o commit, a branch e o PR automaticamente
          commit-message: "chore: Atualiza imagem de ${{ values.app_name }} para ${{ '${{ needs.build-and-push-image.outputs.image_tag }}' }}"
          title: "CI: Atualiza imagem para ${{ '${{ needs.build-and-push-image.outputs.image_tag }}' }}"
          body: "PR criado automaticamente pela pipeline para atualizar a tag da imagem no Helm para a versão **${{ '${{ needs.build-and-push-image.outputs.image_tag }}' }}**."
          # Cria uma branch mais descritiva
          branch: "ci/update-image-${{ '${{ needs.build-and-push-image.outputs.image_tag }}' }}"
          base: main
          # Deleta a branch após o merge do PR
          delete-branch: true
        
      - name: Install ArgoCD CLI
        shell: bash
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd
          argocd version

      - name: ArgoCD Login
        shell: bash
        run: |
          argocd login argocd.uday.com.br \
            --insecure \
            --grpc-web \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }}

      - name: Ensure ArgoCD repo and app
        shell: bash
        run: |
          repo_url="https://github.com/uday-platform-idp-org/${{ values.app_name }}.git"
          
          # Adiciona o repositório ao ArgoCD, se ainda não estiver
          if ! argocd repo list | grep -q "$repo_url"; then
            argocd repo add "$repo_url"
          fi

          # Cria o app se ainda não existir
          if ! argocd app get ${{ values.app_name }} > /dev/null 2>&1; then
            argocd app create ${{ values.app_name }} \
              --repo "$repo_url" \
              --path charts/${{ values.app_name }} \
              --dest-namespace ${{ values.app_env }} \
              --dest-server https://kubernetes.default.svc \
              --values values-${{ values.app_env }}.yaml \
              --revision main \
              --sync-policy manual \
              --sync-option CreateNamespace=true \
              --type helm
          fi

      - name: ArgoCD App Sync
        shell: bash
        run: |
          argocd app sync ${{ values.app_name }}
          argocd app wait ${{ values.app_name }} --timeout 180